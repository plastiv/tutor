package ua.kharkiv.lingvotutor.provider;import android.content.ContentUris;import android.net.Uri;import android.provider.BaseColumns;/** * Contract class for interacting with {@link DictionaryProvider}. */public class DictionaryContract {    interface WordsColumns {        String WORD_ID = "word_id";        String WORD_NAME = "word_name";        String WORD_TRANSLATION = "word_tanslation";        String WORD_TRANSCRIPTION = "word_transcription";        String WORD_EXAMPLE = "word_example";    }        interface DictionaryColumns {        String DICTIONARY_ID = "dictionary_id";        String DICTIONARY_TITLE = "dictionary_title";        String DICTIONARY_WORDS_COUNT = "dictionary_words_count";    }    public static final String CONTENT_AUTHORITY = "ua.kharkiv.lingvotutor";    private static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);    private static final String PATH_WORDS = "words";    private static final String PATH_DICTIONARY = "dictionary";    private static final String PATH_SEARCH = "search";    private static final String PATH_SEARCH_SUGGEST = "search_suggest_query";    /**     * Describes Words Table     */    public static class Words implements WordsColumns, BaseColumns {        public static final Uri CONTENT_URI =                BASE_CONTENT_URI.buildUpon().appendPath(PATH_WORDS).build();        /** Default "ORDER BY" clause. */        public static final String DEFAULT_SORT = WordsColumns.WORD_NAME + " ASC";        public static final String CONTENT_TYPE =                "vnd.android.cursor.dir/vnd.lingvotutor.words";        public static final String CONTENT_ITEM_TYPE =                "vnd.android.cursor.item/vnd.lingvotutor.words";        /** Build {@link Uri} for requested {@link #WORD_ID}. */        public static Uri buildWordUri(String wordId) {            return CONTENT_URI.buildUpon().appendPath(wordId).build();        }                public static Uri buildSearchUri(String query) {            return CONTENT_URI.buildUpon().appendPath(PATH_SEARCH).appendPath(query).build();        }        public static boolean isSearchUri(Uri uri) {            return PATH_SEARCH.equals(uri.getPathSegments().get(1));        }                /** Read {@link #WORD_ID} from {@link Words} {@link Uri}. */        public static String getWordId(Uri uri) {            return uri.getPathSegments().get(1);        }        public static String getSearchQuery(Uri uri) {            return uri.getPathSegments().get(2);        }		public static Uri buildWordUri(long id) {						return ContentUris.withAppendedId(CONTENT_URI, id);		}    }        /**     * Describes Dictionary Table     */    public static class Dictionary implements DictionaryColumns, BaseColumns {        public static final Uri CONTENT_URI =                BASE_CONTENT_URI.buildUpon().appendPath(PATH_DICTIONARY).build();        /** Default "ORDER BY" clause. */        public static final String DEFAULT_SORT = DictionaryColumns.DICTIONARY_TITLE + " ASC";        public static final String CONTENT_TYPE =                "vnd.android.cursor.dir/vnd.lingvotutor.dictionary";        public static final String CONTENT_ITEM_TYPE =                "vnd.android.cursor.item/vnd.lingvotutor.dictionary";        /** Build {@link Uri} for requested {@link #WORD_ID}. */        public static Uri buildDictionaryUri(String dictionaryId) {            return CONTENT_URI.buildUpon().appendPath(dictionaryId).build();        }    }    public static class SearchSuggest {        public static final Uri CONTENT_URI =                BASE_CONTENT_URI.buildUpon().appendPath(PATH_SEARCH_SUGGEST).build();        public static final String DEFAULT_SORT = WordsColumns.WORD_NAME + " COLLATE NOCASE ASC";    }    private DictionaryContract() {    }}